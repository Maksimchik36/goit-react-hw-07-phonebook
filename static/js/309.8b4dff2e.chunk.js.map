{"version":3,"file":"static/js/309.8b4dff2e.chunk.js","mappings":"4NAEaA,EAAOC,EAAAA,EAAAA,KAAH,uGAMJC,EAAQD,EAAAA,EAAAA,MAAH,iEAKLE,EAAQF,EAAAA,EAAAA,MAAH,4CAILG,EAASH,EAAAA,EAAAA,OAAH,qK,SCkEnB,EA7EoB,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SAiDf,OACE,UAACL,EAAD,CAAMK,SAAUA,EAAhB,WACE,UAACH,EAAD,mBACE,SAACC,EAAD,CACEG,KAAK,OACLC,KAAK,OACLC,QAAQ,yHACRC,MAAM,yIAGNC,UAAQ,QAEZ,UAACR,EAAD,oBACE,SAACC,EAAD,CACEG,KAAK,MACLC,KAAK,QACLC,QAAQ,yFACRC,MAAM,+FAGNC,UAAQ,QAGZ,SAACN,EAAD,CAAQE,KAAK,SAAb,6BC5ECK,EAAuBV,EAAAA,EAAAA,IAAH,wB,kBCqCjC,EAhC0B,WAItB,OAAqCW,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAuBC,EAAvB,KAAuBA,UAqBvB,OAAO,UAACH,EAAD,WACFG,IAAa,SAACC,EAAA,EAAD,KACd,SAAC,EAAD,CAAaV,SArBI,SAAAW,GACjBA,EAAMC,iBAEN,IAAMV,EAAOS,EAAME,OAAOC,SAASZ,KAAKa,MAElCC,EAAQL,EAAME,OAAOC,SAASE,MAAMD,MAE1CJ,EAAMM,cAAcC,QAEpB,IACIV,EAAc,CAAEN,KAAAA,EAAMc,MAAAA,IAEtBG,QAAQC,IAAI,WAEhB,SACID,QAAQC,IAAI","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/CreateContactPage/CreateContactPage.styled.jsx","pages/CreateContactPage/CreateContactPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\npadding: 20px;\ndisplay: flex; \nflex-direction: column; \nalign-items: center;`\n\nexport const Label = styled.label`\nmargin-bottom: 20px;\nfont-weight: 700;\n`;\n\nexport const Input = styled.input`\nmargin-left: 10px;\n`;\n\nexport const Button = styled.button`\npadding: 5px;\nborder-radius: 4px;\nborder-color: #747274;\nfont-weight: 600;\ncursor: pointer;\n&:hover {\nbackground-color: #87ff37b3;\n}\n`","// import React, { useState } from \"react\";\n// import { nanoid } from 'nanoid';\n// import { addContact } from \"redux/contactsSlice\";\n// import { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Label, Input, Button} from './ContactForm.styled'\n\nconst ContactForm = ({ onSubmit }) => {\n   \n  // const [name, setName] = useState('');\n  // const [phone, setPhone] = useState('');\n  \n  // // получает ссылку на функцию для отправки действий\n  // const dispatch = useDispatch();\n\n  // // читает данные из state.contacts(store) и подписывается на их обновление  \n  // const contacts = useSelector(state => state.contacts.value);\n\n\n  // // изменяет значение имени name на введённое в инпуте\n  // const handleChangeName = (event) => {\n  //   const { value } = event.target.value;\n  //   setName(value);\n  // };\n\n  // изменяет значение номера телефона number на введённое в инпуте\n  // const handleChangePhone = (event) => {\n  //   const { value } = event.target.value;\n  //   setPhone(value);\n  // };\n\n  // добавляет введённые данные в contacts(store)\n  // const handleSubmit = () => console.log(\"handleSubmit\");\n  // const handleSubmit = event => {\n  //   event.preventDefault();\n  //   const {name, number} = event.currentTarget;\n  //   const id = nanoid();\n  //   const newContact = { id: id, name: name.value, number: number.value };\n\n  //   // есть ли добавляемый контакт в списке уже существующих контактов ?\n  //   const contactIsInList = contacts.some(contact =>contact.name === newContact.name);\n  //   // сообщение об ошибке\n  //   const errorAdd = () => alert(`${newContact.name} is already in contacts list.`);\n  //   // если нового контакта нет в списке, добавляет его. в противном случае - выдает сообщение об ошибке\n  //   contactIsInList !== true ? dispatch(console.log(`Add contact ${newContact}`)) : errorAdd();\n  //   reset();\n  // }\n  \n  \n  // очищение инпутов формы\n  // const reset = () => {\n  //   setName('');\n  //   setNumber('');\n  // };\n  \n\n        return( \n          <Form onSubmit={onSubmit}>\n            <Label>Name\n              <Input \n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                // onChange={handleChangeName}\n                // value={name}\n                required/>\n            </Label>\n            <Label>Phone\n              <Input\n                type=\"tel\"\n                name=\"phone\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                // onChange={handleChangePhone}\n                // value={phone}\n                required\n              />\n            </Label>\n            <Button type=\"submit\">Add contact</Button>\n      </Form>\n    )    \n}\n\nexport default ContactForm;\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from \"react\";\n// import { nanoid } from 'nanoid';\n// import { addContact } from \"redux/contactsSlice\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Form, Label, Input, Button} from './ContactForm.styled'\n\n// const ContactForm = () => {\n   \n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n  \n//   // получает ссылку на функцию для отправки действий\n//   const dispatch = useDispatch();\n\n//   // читает данные из state.contacts(store) и подписывается на их обновление  \n//   const contacts = useSelector(state => state.contacts.value);\n\n\n//   // изменяет значение имени name на введённое в инпуте\n//   const handleChangeName = (event) => {\n//     const { value } = event.target;\n//     setName(value);\n//   };\n\n\n//   // изменяет значение номера телефона number на введённое в инпуте\n//   const handleChangeNumber = (event) => {\n//     const { value } = event.target;\n//     setNumber(value);\n//   };\n\n\n//   // добавляет введённые данные в contacts(store)\n//   const handleSubmit = event => {\n//     event.preventDefault();\n//     const {name, number} = event.currentTarget;\n//     const id = nanoid();\n//     const newContact = { id: id, name: name.value, number: number.value };\n\n//     // есть ли добавляемый контакт в списке уже существующих контактов ?\n//     const contactIsInList = contacts.some(contact =>contact.name === newContact.name);\n//     // сообщение об ошибке\n//     const errorAdd = () => alert(`${newContact.name} is already in contacts list.`);\n//     // если нового контакта нет в списке, добавляет его. в противном случае - выдает сообщение об ошибке\n//     contactIsInList !== true ? dispatch(addContact(newContact)) : errorAdd();\n//     reset();\n//   }\n  \n  \n//   // очищение инпутов формы\n//   const reset = () => {\n//     setName('');\n//     setNumber('');\n//   };\n  \n  \n//         return(\n//           <Form onSubmit={handleSubmit}>\n//             <Label>Name\n//               <Input \n//                 type=\"text\"\n//                 name=\"name\"\n//                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//                 title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//                 onChange={handleChangeName}\n//                 value={name}\n//                 required/>\n//             </Label>\n//             <Label>Number\n//               <Input\n//                 type=\"tel\"\n//                 name=\"number\"\n//                 pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//                 title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//                 onChange={handleChangeNumber}\n//                 value={number}\n//                 required\n//               />\n//             </Label>\n//             <Button type=\"submit\">Add contact</Button>\n//       </Form>\n//     )\n    \n// }\n\n// export default ContactForm;","import styled from '@emotion/styled';\n\nexport const CreateContactsPageSt = styled.div`\n`;\n\n// export const TitleCreateSt = styled.h2`\n// margin: 10px;\n// font-size: 40px;\n// text-align: center;\n// `;","import ContactForm from \"components/ContactForm\";\n// import { useHistory } from 'react-router-dom';\nimport { CreateContactsPageSt } from \"./CreateContactPage.styled\";\nimport { useCreateContactMutation } from \"redux/contactSlice\";\nimport Loader from \"components/Loader\";\n    \n    \nconst CreateContactPage = () => {\n    // для отправки пользователя на другую page \n    // const history = useHistory();\n    // ф-я возвращает ф-ю и статусы выполнения\n    const [createContact, {isLoading}] = useCreateContactMutation();\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        // значение input поля name\n        const name = event.target.elements.name.value;\n        // значение input поля phone\n        const phone = event.target.elements.phone.value;\n        // сброс значений инпутов формы\n        event.currentTarget.reset();\n        // вызов ф-и, к-рая создаёт новый контакт с данными, полученными из input-ов, и отправляет его на бэк-энд mockAPI\n        try {\n            createContact({ name, phone, });\n            // history.push('contacts');\n            console.log(\"SUCCESS\");\n         }\n        catch {\n            console.log(\"ERROR\");\n        }\n    }\n\n    return <CreateContactsPageSt>\n        {isLoading && <Loader />}\n        <ContactForm onSubmit={handleSubmit}></ContactForm>\n    </CreateContactsPageSt>\n\n}\n\nexport default CreateContactPage;"],"names":["Form","styled","Label","Input","Button","onSubmit","type","name","pattern","title","required","CreateContactsPageSt","useCreateContactMutation","createContact","isLoading","Loader","event","preventDefault","target","elements","value","phone","currentTarget","reset","console","log"],"sourceRoot":""}