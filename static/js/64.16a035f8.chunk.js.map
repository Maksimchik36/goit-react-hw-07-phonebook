{"version":3,"file":"static/js/64.16a035f8.chunk.js","mappings":"gOAEaA,EAAOC,EAAAA,EAAAA,GAAH,8CAIJC,EAAOD,EAAAA,EAAAA,GAAH,gIAQJE,EAASF,EAAAA,EAAAA,OAAH,oL,SCCnB,EAboB,SAAC,GAAsC,IAApCG,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAGzC,OACE,SAACN,EAAD,UACKI,EAASG,KAAI,SAAAC,GAAU,OAAO,UAACN,EAAD,WAAwBM,EAAQC,KAAhC,KAAwCD,EAAQE,OACjD,SAACP,EAAD,CAAQQ,QAAS,kBAAMN,EAASG,EAAQI,KAAxC,SAA+CN,EAAW,cAAgB,aAD9DE,EAAQI,UCL7CC,EAAkBZ,EAAAA,EAAAA,GAAH,8EAMfa,EAAiBb,EAAAA,EAAAA,IAAH,wB,mCCNdc,EAAYd,EAAAA,EAAAA,IAAH,6DAKTe,EAAQf,EAAAA,EAAAA,MAAH,2CAILgB,EAAQhB,EAAAA,EAAAA,MAAH,8CCelB,EAtBqB,WAEnB,IAAMiB,GAAWC,EAAAA,EAAAA,MAcf,OAAO,SAACJ,EAAD,WAAW,UAACC,EAAD,mCAChB,SAACC,EAAD,CAAOG,KAAK,OAAOC,SAPD,SAACC,GAErBJ,GAASK,EAAAA,EAAAA,IAAUD,EAAME,OAAOC,iBCQpC,EAlBqB,WAEjB,OAAwCC,EAAAA,EAAAA,MAAhCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,UAE1B,GAAmDC,EAAAA,EAAAA,MAAnD,eAAOC,EAAP,KAAmCC,EAAnC,KAAwBC,UAGzB,OAAO,UAACnB,EAAD,WACFe,IAAa,SAAChB,EAAD,uBAEbe,IAAc,SAACM,EAAA,EAAD,IAEdL,IAAa,SAAC,EAAD,IAEbF,IAAQ,SAAC,EAAD,CAAavB,SAAUuB,EAAMtB,SAAU0B,EAAezB,SAAU0B","sources":["components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.styled.jsx","components/FilterByName/FilterByName.styled.jsx","components/FilterByName/FilterByName.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\nmargin-bottom: 10px;\n`;\n\nexport const Item = styled.li`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nmargin-bottom: 10px;\nfont-size: 20px;\n`;\n\nexport const Button = styled.button`\nmargin-left: 10px;\npadding: 5px;\nborder-radius: 4px;\nborder-color: #747274;\nfont-weight: 600;\ncursor: pointer;\n&:hover {\nbackground-color: #f32b2b;\n`;\n\n","import { List, Item, Button } from './ContactList.styled';\n\nconst ContactList = ({ contacts, onDelete, deleting }) => {\n\n  \n  return (\n    <List>        \n        {contacts.map(contact=>{return <Item key={contact.id}>{contact.name}: {contact.phone}\n                                      <Button onClick={() => onDelete(contact.id)} >{deleting ? 'Deleting...' : 'Delete'}</Button>\n                                    </Item>})}\n    </List>\n  )\n}\n\n\nexport default ContactList;\n\n\n\n\n\n\n\n\n\n\n// import { useSelector, useDispatch } from 'react-redux';\n// import { delContact } from 'redux/contactsSlice';\n// import {List, Item, Button} from './ContactList.styled'\n\n\n// const ContactList = () =>{\n//   // читает данные из state.contacts(store) и подписывается на их обновление\n//   const contacts = useSelector(state => state.contacts.value);\n\n//   // читает данные из state.filter(store) и подписывается на их обновление  \n//   const filter = useSelector(state => state.filter.value);\n  \n//   // получает ссылку на функцию для отправки действий\n//   const dispatch = useDispatch();\n\n\n//   // получает отфильтрованные контакты\n//   const getVisibleContacts = () => {\n//     // приводит значение filter к нижнему регистру\n//     const normalizedFilter = filter.toLowerCase();    \n//     // фильтрует контакты в зависимости от введённых данных в форме поиска\n//     return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n//   }\n\n\n//   // результат вызова функции записывается в переменную (для облегчения последующего использования в коде)\n//   const visibleContacts = getVisibleContacts();\n\n\n//     return(<List>        \n//         {visibleContacts.map(contact=>{return <Item key={contact.id}>{contact.name}: {contact.number}\n//                                       <Button onClick={()=>dispatch(delContact(contact.id))}>Delete</Button>\n//                                     </Item>})}\n//       </List>)\n// }\n\n\n// export default ContactList;","import styled from '@emotion/styled';\n\nexport const TitleContactsSt = styled.h1`\nmargin: 10px;\nfont-size: 40px;\ntext-align: center;\n`;\n\nexport const ContactsPageSt = styled.div`\n`;","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\npadding: 10px;\ntext-align: center;\n`;\n\nexport const Label = styled.label`\nfont-weight: 700;\n`;\n\nexport const Input = styled.input`\nmargin-left: 10px;\n\n`;","import { useDispatch} from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { Container, Label, Input } from './FilterByName.styled';\n\nconst FilterByName = () => {\n  // получает ссылку на функцию для отправки действий\n  const dispatch = useDispatch();\n\n  // читает данные из state.filter(store) и подписывается на их обновление\n  // const value = useSelector(state => state.filter.value)\n  // console.log(\"value\", value)\n\n\n   // записывает в filter(store) вводимые в input(FilterByName) данные \n   const handleFilter = (event) => {\n    // отправляет action setFilter со значением value\n    dispatch(setFilter(event.target.value))\n  };\n\n\n    return(<Container><Label>Find contact by Name\n      <Input type=\"text\" onChange={handleFilter} />\n    </Label></Container>)\n}\n\n\nexport default FilterByName;\n\n\n\n\n\n\n\n\n\n// import { useDispatch} from 'react-redux';\n// import { setFilter } from 'redux/filterSlice';\n// import { Container, Label, Input } from './FilterByName.styled';\n\n// const FilterByName = () => {\n//   // получает ссылку на функцию для отправки действий\n//   const dispatch = useDispatch();\n\n//   // читает данные из state.filter(store) и подписывается на их обновление\n//   // const value = useSelector(state => state.filter.value)\n//   // console.log(\"value\", value)\n\n\n//    // записывает в filter(store) вводимые в input(FilterByName) данные \n//    const handleFilter = (event) => {\n//     // отправляет action setFilter со значением value\n//     dispatch(setFilter(event.target.value))\n//   };\n\n\n//     return(<Container><Label>Find contact by Name\n//       <Input type=\"text\" onChange={handleFilter} />\n//     </Label></Container>)\n// }\n\n\n// export default FilterByName;","import ContactList from \"components/ContactList\";\nimport { TitleContactsSt, ContactsPageSt } from './ContactsPage.styled';\nimport { useFetchContactsQuery, useDeleteContactMutation } from \"redux/contactSlice\";\nimport Loader from \"components/Loader\";\nimport FilterByName from \"components/FilterByName\";\n\nconst ContactsPage = () => {\n    // ф-я возвращает данные и статусы выполнения\n    const { data, isFetching, isSuccess } = useFetchContactsQuery();\n    // ф-я возвращает ф-ю и статусы выполнения\n    const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n    \n   return <ContactsPageSt>\n       {isSuccess && <TitleContactsSt>Contacts</TitleContactsSt>}\n\n       {isFetching && <Loader />}\n       \n       {isSuccess && <FilterByName></FilterByName>}\n       \n       {data && <ContactList contacts={data} onDelete={deleteContact} deleting={isDeleting} />}\n   </ContactsPageSt>\n}\n\nexport default ContactsPage;"],"names":["List","styled","Item","Button","contacts","onDelete","deleting","map","contact","name","phone","onClick","id","TitleContactsSt","ContactsPageSt","Container","Label","Input","dispatch","useDispatch","type","onChange","event","setFilter","target","value","useFetchContactsQuery","data","isFetching","isSuccess","useDeleteContactMutation","deleteContact","isDeleting","isLoading","Loader"],"sourceRoot":""}